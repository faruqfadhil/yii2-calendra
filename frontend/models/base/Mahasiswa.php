<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace frontend\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\base\NotSupportedException;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;
use frontend\models\Jurusan;

/**
 * This is the base-model class for table "mahasiswa".
 *
 * @property integer $id
 * @property string $username
 * @property string $auth_key
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property string $nama_lengkap
 * @property string $nimrn
 * @property string $tempat_lahir
 * @property string $tanggal_lahir
 * @property string $alamat
 * @property string $tahun_masuk
 * @property string $status
 * @property string $foto
 * @property integer $fakultas
 * @property integer $jurusan
 * @property string $pekerjaan
 * @property double $lat
 * @property double $lng
 * @property integer $aprroved
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $aliasModel
 * @property double $deskripsi
 */
class Mahasiswa extends ActiveRecord implements IdentityInterface
{


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%mahasiswa}}';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['username', 'password_hash', 'nama_lengkap', 'nimrn', 'email'], 'required'],
            [['fakultas', 'jurusan', 'aprroved'], 'integer'],
            [['lat', 'lng'], 'number'],
            [['username'], 'string', 'max' => 25],
            [['auth_key'], 'string', 'max' => 32],
            [['password_reset_token', 'email','password_hash'], 'string', 'max' => 255],
            [['nama_lengkap', 'nimrn', 'tempat_lahir', 'tanggal_lahir', 'alamat', 'pekerjaan'], 'string', 'max' => 100],
            [['tahun_masuk'], 'string', 'max' => 4],
            [['status'], 'string', 'max' => 20],
            [['kota','provinsi','negara'], 'string', 'max' => 200],
            [['deskripsi','donasi_rutin','jumlah_donasi'], 'safe'],
            [['foto'], 'string', 'max' => 120]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => 'Username',
            'auth_key' => 'Auth Key',
            'password_hash' => 'Password Hash',
            'password_reset_token' => 'Password Reset Token',
            'email' => 'Email',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'nama_lengkap' => 'Nama Lengkap',
            'nimrn' => 'Nimrn',
            'tempat_lahir' => 'Tempat Lahir',
            'tanggal_lahir' => 'Tanggal Lahir',
            'alamat' => 'Alamat',
            'tahun_masuk' => 'Tahun Masuk',
            'status' => 'Status',
            'foto' => 'Foto',
            'fakultas' => 'Fakultas',
            'jurusan' => 'Jurusan',
            'pekerjaan' => 'Pekerjaan',
            'lat' => 'Lat',
            'lng' => 'Lng',
            'aprroved' => 'Aprroved',
            'deskripsi' => 'Deskripsi',
            'kota' => 'Kota',
            'provinsi' => 'Provinsi',
            'negara' => 'Negara'
        ];
    }
    /** INCLUDE USER LOGIN VALIDATION FUNCTIONS**/
    /**
     * @inheritdoc
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id]);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username]);
    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return boolean
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int) substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['mahasiswa.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return boolean if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    public function getNamaJurusan()
    {
        return $this->hasOne(Jurusan::className(), ['id' => 'jurusan']);
    }
}